name: Build
on:
  push:
  pull_request:
  schedule:
    - cron: '30 12 * * 5'

env:
  SRC_OWNER: WayneD
  SRC_REPO: rsync

jobs:
  compile:
    name: Compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - armv7a-linux-androideabi
          - aarch64-linux-android
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Query latest release tag
        uses: octokit/graphql-action@v2.x
        id: latest_release_data
        with:
          query: |
            query release($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                refs(refPrefix:"refs/tags/", first:1, orderBy:{field:TAG_COMMIT_DATE, direction:DESC}) {
                  edges {
                    node {
                      name
                    }
                  }
                }
              }
            }
          owner: ${{ env.SRC_OWNER }}
          repo: ${{ env.SRC_REPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Latest release tag name
        id: latest_release
        uses: gr2m/get-json-paths-action@v1.x
        with:
          json: ${{ steps.latest_release_data.outputs.data }}
          name: "repository.refs.edges[0].node.name"

      - name: Checkout latest release
        uses: actions/checkout@v2
        with:
          repository: ${{ env.SRC_OWNER }}/${{ env.SRC_REPO }}
          ref: ${{ steps.latest_release.outputs.name }}
          path: ${{ env.SRC_REPO }}

      - name: Build script
        run: ./build
        env:
          TARGET: ${{ matrix.target }}

      - name: Collect binaries and build info
        run: |
          mkdir output buildinfo
          cp rsync/rsync output
          cp rsync/COPYING output/COPYING.txt
          echo '${{ steps.latest_release.outputs.name }}' > buildinfo/release
          grep Pkg.Revision "$ANDROID_HOME/ndk-bundle/source.properties" | \
               cut -d ' ' -f 3 >> buildinfo/ndkver

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}
          path: output

      - name: Upload build info as artifact
        uses: actions/upload-artifact@v1
        with:
          name: buildinfo
          path: buildinfo

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: compile

    steps:
      - name: Fetch build info artifact
        uses: actions/download-artifact@v1
        with:
          name: buildinfo

      - name: Extract info to environment vars
        run: |
          echo ::set-env name=BUILD_RELEASE::"$(cat buildinfo/release)"
          echo ::set-env name=NDK_VERSION::"$(cat buildinfo/ndkver)"
          echo ::set-env name=REPO_OWNER::"${GITHUB_REPOSITORY%%/*}"
          echo ::set-env name=REPO_NAME::"${GITHUB_REPOSITORY#*/}"

      - name: Query latest release
        uses: octokit/graphql-action@v2.x
        id: latest_release_data
        with:
          query: |
            query release($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                releases(first:1, orderBy:{field:CREATED_AT, direction:DESC}) {
                  nodes {
                    tagName
                  }
                }
              }
            }
          owner: ${{ env.REPO_OWNER }}
          repo: ${{ env.REPO_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Latest release tag name
        id: latest_release
        uses: gr2m/get-json-paths-action@v1.x
        with:
          json: ${{ steps.latest_release_data.outputs.data }}
          name: "repository.releases.nodes[0].tagName"

      - name: Fetch armv7a artifact
        uses: actions/download-artifact@v1
        with:
          name: armv7a-linux-androideabi

      - name: Fetch aarch64 artifact
        uses: actions/download-artifact@v1
        with:
          name: aarch64-linux-android

      - name: Package assets
        run: |
          zip --junk-paths rsync-armv7a-linux-androideabi.zip \
              armv7a-linux-androideabi/*
          zip --junk-paths rsync-aarch64-linux-android.zip \
              aarch64-linux-android/*

      - name: Create release
        if: >
          env.BUILD_RELEASE != steps.latest_release.outputs.name && (
          (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
          github.event_name == 'schedule')
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.BUILD_RELEASE }}
          release_name: ${{ env.BUILD_RELEASE }}
          prerelease: ${{ contains(env.BUILD_RELEASE, 'pre') }}
          body: >
            rsync binary built for Android with NDK version
            ${{ env.NDK_VERSION }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload armv7a-linux-androideabi zip asset
        if: >
          env.BUILD_RELEASE != steps.latest_release.outputs.name && (
          (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
          github.event_name == 'schedule')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./rsync-armv7a-linux-androideabi.zip
          asset_name: rsync-armv7a-linux-androideabi.zip
          asset_content_type: application/zip

      - name: Upload aarch64-linux-android zip asset
        if: >
          env.BUILD_RELEASE != steps.latest_release.outputs.name && (
          (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
          github.event_name == 'schedule')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./rsync-aarch64-linux-android.zip
          asset_name: rsync-aarch64-linux-android.zip
          asset_content_type: application/zip
